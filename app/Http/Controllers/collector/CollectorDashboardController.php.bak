<?php

namespace App\Http\    // Get ALL reports assigned to this collector (both active and completed)
    $allAssignedReports = WasteReport::with('resident')
        ->forCollector($collector->id)
        ->orderByDesc('created_at')
        ->get();

    return view('collector.dashboard', [
        'collector'         => $collector,
        'activeReports'     => $activeReports,
        'completedReports'  => $completedReports,
        'assignedReports'   => $allAssignedReports, // Now includes both active and completed reports
        'collectorLat'      => $collector->latitude,
        'collectorLng'      => $collector->longitude,
    ]);rs\Collector;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\WasteReport;
use App\Notifications\ReportStatusUpdated;

class CollectorDashboardController extends Controller
{
    public function index()
{
    $collector = Auth::user();

    $activeReports = WasteReport::with('resident')
        ->activeForCollector($collector->id)
        ->orderByDesc('created_at')
        ->get();

    $completedReports = WasteReport::with('resident')
        ->completedForCollector($collector->id)
        ->orderByDesc('created_at')
        ->get();

    return view('collector.dashboard', [
        'collector'         => $collector,
        'activeReports'     => $activeReports,
        'completedReports'  => $completedReports,
        // ⬇️ Back-compat so old Blade using $assignedReports won’t crash
        'assignedReports'   => $activeReports,
        'collectorLat'      => $collector->latitude,
        'collectorLng'      => $collector->longitude,
    ]);
}

    public function updateLocation(Request $request)
    {
        $request->validate([
            'latitude'  => ['required','numeric'],
            'longitude' => ['required','numeric'],
        ]);

        $user = Auth::user();
        $user->latitude  = (float) $request->latitude;
        $user->longitude = (float) $request->longitude;
        $user->location  = $request->input('location'); // nullable
        $user->save();

        return response()->json(['success' => true]);
    }

    /**
     * Mark a report as collected by this collector.
     */
    public function markAsCollected($id)
    {
        $report = WasteReport::findOrFail($id);

        if ($report->collector_id !== Auth::id()) {
            return back()->with('error', 'Unauthorized');
        }

        // Always use the model constant to avoid case/typo issues
        $report->status = WasteReport::ST_COLLECTED; // 'collected'
        // If you have a collected_at column, uncomment this:
        // $report->collected_at = now();
        $report->save();

        // Notify resident if relation exists
        if ($report->resident) {
            $report->resident->notify(new ReportStatusUpdated($report, WasteReport::ST_COLLECTED));
        }

        return back()->with('success', 'Report marked as collected.');
    }

    /**
     * (Optional) If you let collectors move an assigned report to in_progress.
     */
    public function startWork($id)
    {
        $report = WasteReport::findOrFail($id);

        if ($report->collector_id !== Auth::id()) {
            return back()->with('error', 'Unauthorized');
        }

        if ($report->status === WasteReport::ST_ASSIGNED) {
            $report->status = WasteReport::ST_IN_PROGRESS;
            $report->save();

            if ($report->resident) {
                $report->resident->notify(new ReportStatusUpdated($report, WasteReport::ST_IN_PROGRESS));
            }
        }

        return back()->with('success', 'Report marked as in progress.');
    }
}